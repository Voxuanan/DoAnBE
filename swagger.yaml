tags:
  - name: users
    description: users API
  - name: words
    description: words API
  - name: auth
    description: authenticate
  - name: topics
    description: topics API

paths:
  # [Post] login
  /login:
    post:
      tags:
        - auth
      sumary: Login
      parameters:
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  # [Post] signup
  /signup:
    post:
      tags:
        - auth
      sumary: SignUp
      parameters:
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        500:
          description: 'Server Error'

  # [Post] logout
  /logout:
    post:
      tags:
        - auth
      sumary: logout
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        401:
          description: 'Wrong authentication token'
        404:
          description: 'Authentication token missing'
        500:
          description: 'Server Error'

  # [GET] users
  /users:
    get:
      tags:
        - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    # [POST] users
    post:
      tags:
        - users
      summary: Add User
      parameters:
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] users/id
  /users/{id}:
    get:
      tags:
        - users
      summary: Find User By Id
      parameters:
        - name: id
          in: path
          description: User Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] users/id
    put:
      tags:
        - users
      summary: Update User By Id
      parameters:
        - name: id
          in: path
          description: user Id
          required: true
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] users/id
    delete:
      tags:
        - users
      summary: Delete User By Id
      parameters:
        - name: id
          in: path
          description: user Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] words/word
  /words/{word}:
    get:
      tags:
        - words
      summary: Find Word's Audio
      parameters:
        - name: word
          in: path
          description: Word
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] topics
  /topics:
    get:
      tags:
        - topics
      summary: Find All Topics
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    # [POST] topics
    post:
      tags:
        - topics
      summary: Add Topic
      parameters:
        - name: body
          in: body
          description: topic Data
          required: true
          schema:
            $ref: '#/definitions/topics'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] topics/id
  /topics/{id}:
    get:
      tags:
        - topics
      summary: Find Topic By Id
      parameters:
        - name: id
          in: path
          description: Topic Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] topics/id
    put:
      tags:
        - topics
      summary: Update Topic By Id
      parameters:
        - name: id
          in: path
          description: topic Id
          required: true
        - name: body
          in: body
          description: topic Data
          required: true
          schema:
            $ref: '#/definitions/topics'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] topics/id
    delete:
      tags:
        - topics
      summary: Delete Topic By Id
      parameters:
        - name: id
          in: path
          description: topic Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
  # [GET] lessons
  /lessons:
    get:
      tags:
        - lessons
      summary: Find Paginate Lessons
      parameters:
        - name: page
          in: query
          type: number
          required: true
        - name: limit
          in: query
          type: number
          required: true
        - name: searchKey
          in: query
          type: string
        - name: sort
          in: query
          type: string
        - name: filter
          in: query
          type: string
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

    # [POST] lessons
    post:
      tags:
        - lessons
      summary: Add Lesson
      parameters:
        - name: body
          in: body
          description: lesson Data
          required: true
          schema:
            $ref: '#/definitions/lessons'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

  # [GET] lessons/id
  /lessons/{id}:
    get:
      tags:
        - lessons
      summary: Find Lesson By Id
      parameters:
        - name: id
          in: path
          description: Lesson Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] lessons/id
    put:
      tags:
        - lessons
      summary: Update Lesson By Id
      parameters:
        - name: id
          in: path
          description: lesson Id
          required: true
        - name: body
          in: body
          description: lesson Data
          required: true
          schema:
            $ref: '#/definitions/lessons'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] lessons/id
    delete:
      tags:
        - lessons
      summary: Delete Lesson By Id
      parameters:
        - name: id
          in: path
          description: lesson Id
          required: true
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# definitions
definitions:
  users:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password
  topics:
    type: object
    required:
      - name
      - description
    properties:
      name:
        type: string
        description: topic Name
      description:
        type: string
        description: topic Description
  lessons:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: lesson Name

schemes:
  - https
  - http
